plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id "com.diffplug.spotless" version "6.13.0"
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

group = 'cloud.eppo'
version = '5.1.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
  with copySpec {
    from 'src/main/filteredResources'
    filter(ReplaceTokens, tokens: [version: project.properties.version])
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
  api 'cloud.eppo:sdk-common-jvm:3.9.0'

  implementation 'com.github.zafarkhaja:java-semver:0.10.2'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
  implementation 'org.ehcache:ehcache:3.10.8'
  implementation 'org.slf4j:slf4j-api:2.0.17'
  // Logback classic 1.3.x is compatible with java 8
  implementation 'ch.qos.logback:logback-classic:1.3.14'
  implementation 'org.jetbrains:annotations:26.0.2'

  testImplementation 'cloud.eppo:sdk-common-jvm:3.5.4:tests'
  testImplementation platform('org.junit:junit-bom:5.11.4')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.2'
  testImplementation 'org.mockito:mockito-core:4.11.0'
  testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
}

test {
  useJUnitPlatform()
  testLogging {
    events "started", "passed", "skipped", "failed"
    exceptionFormat "full"
    showExceptions true
    showCauses true
    showStackTraces true
  }
}

spotless {
  ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '.gitattributes', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }
  java {
    // apply a specific flavor of google-java-format
    googleJavaFormat('1.7')
    // fix formatting of type annotations
    formatAnnotations()
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'eppo-server-sdk'
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = 'Eppo JVM SDK'
        description = 'Eppo SDK for JVM'
        url = 'https://github.com/Eppo-exp/java-server-sdk'
        licenses {
          license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
          }
        }
        developers {
          developer {
            name = 'Eppo'
            email = 'https://geteppo.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/Eppo-exp/java-server-sdk'
          developerConnection = 'scm:git:ssh://github.com/Eppo-exp/java-server-sdk'
          url = 'http://github.com/Eppo-exp/java-server-sdk'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = project.properties.containsKey("ossrhUsername") ? project.properties["ossrhUsername"] : ""
        password = project.properties.containsKey("ossrhPassword") ? project.properties["ossrhPassword"] : ""
      }
    }
  }
}

if (!project.gradle.startParameter.taskNames.contains('publishToMavenLocal')) {
  signing {
    sign publishing.publications.mavenJava
    if (System.env['CI']) {
      useInMemoryPgpKeys(System.env.GPG_PRIVATE_KEY, System.env.GPG_PASSPHRASE)
    }
  }
}

javadoc {
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
  options.addStringOption('Xdoclint:none', '-quiet')
}
